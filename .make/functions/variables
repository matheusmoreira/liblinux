# Accesses the value associated with the given name.
# Useful for functional composition.
#
# Arguments:
#   $(1) = name of the variable to dereference
#
# Variables:
#   $($(1)) = the value that will be accessed
#
# Returns:
#   the valuable of the variable
#
dereference = $($(1))
* = $(call dereference,$(1))

# Tests whether the given variable is undefined.
#
# Arguments:
#   $(1) = name of the variable
#
# Returns:
#   whether the $(1) variable is undefined
#
undefined? = $(call boolean,$(call equal?,undefined,$(flavor $(1))))

# Tests whether the given variable is defined.
#
# Arguments:
#   $(1) = name of the variable
#
# Returns:
#   whether the $(1) variable is defined
#
defined? = $(call not,$(call undefined?,$(1)))

# Resolves a composite variable name.
#
# Arguments:
#   $(1) = list of variable name components in order
#   $(2) = separator
#
# Defaults:
#   $(2) = .
#
# Returns:
#   the name of the variable
#
resolve.name = $(subst $(space),$(or $(2),.),$(strip $(1)))

# Resolves the name of the first defined variable in a list of namespaces.
# A namespace is the first component of a composite variable name.
#
# Arguments:
#   $(1) = list of namespaces in order
#   $(2) = variable to resolve
#   $(3) = separator
#
# Defaults:
#   $(3) = .
#
# Returns:
#   the name of the first defined variable $(1) in the $(2) namespaces
#
resolve.name.first* = $(if $(call defined?,$(4)),$(4),$(call resolve.name.first,$(call rest,$(1)),$(2),$(3)))
resolve.name.first  = $(if $(1),$(call $(0)*,$(1),$(2),$(3),$(call resolve.name,$(firstword $(1)) $(2),$(3))),$(call resolve.name,$(2),$(3)))

# Resolves a composite variable name and retrieves its value.
#
# Arguments:
#   $(1) = list of variable name components in order
#   $(2) = separator
#
# Defaults:
#   $(2) = .
#
# Returns:
#   the value bound to the variable
#
resolve.value = $($(call resolve.name,$(1),$(2)))

# Resolves the value of the first defined variable in a list of namespaces.
# A namespace is the first component of a composite variable name.
#
# Arguments:
#   $(1) = list of namespaces in order
#   $(2) = variable to resolve
#   $(3) = separator
#
# Defaults:
#   $(3) = .
#
# Returns:
#   the value of the first defined variable $(1) in the $(2) namespaces
#
resolve.value.first = $($(call resolve.name.first,$(1),$(2),$(3)))

# Resolves the value of the first defined variable in a list of namespaces
# in addition to the value of the variable in the global namespace.
# A namespace is the first component of a composite variable name.
#
# Arguments:
#   $(1) = list of namespaces
#   $(2) = variable to resolve
#   $(3) = separator
#
# Defaults:
#   $(3) = .
#
# Returns:
#   the the value of $(1) in the global namespace
#   and the value the first defined $(1) variable inside all $(2) namespaces
#
resolve.stack+ = $(strip $(call resolve.value,global $(2),$(3)) $(call resolve.value.first,$(1),$(2),$(3)))

# Resolves the value of the first defined variable in a list of namespaces and the global namespace.
# A namespace is the first component of a composite variable name.
#
# Arguments:
#   $(1) = list of namespaces
#   $(2) = variable to resolve
#   $(3) = separator
#
# Defaults:
#   $(3) = .
#
# Returns:
#   the value the first defined $(1) variable inside all $(2) namespaces
#   or the value of $(1) in the global namespace
#
resolve.stack- = $(call resolve.value.first,$(1) global,$(2),$(3))

# Resolves a variable in a list of namespaces and retrieves their values.
# A namespace is the first component of a composite variable name.
#
# Arguments:
#   $(1) = list of namespaces
#   $(2) = variable to resolve
#   $(3) = separator
#
# Defaults:
#   $(3) = .
#
# Returns:
#   the values bound to the variable $(1) inside all the namespaces in $(2)
#
resolve.all = $(strip $(foreach ns,$(1),$(call resolve.value,$(ns) $(2),$(3))))
