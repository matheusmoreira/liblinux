architecture ?= x86_64
linkage ?= static
compiler ?= gcc

configuration := $(architecture) $(linkage) $(compiler)

option.PIC = $(if $(call equal?,$(linkage),static),-fno-PIC,-fPIC)
option.linkage = $(if $(call equal?,$(linkage),static),-static,-shared)

# Project file system structure
include make/structure

global.compiler.gcc.options := -std=c99 -ffreestanding  \
                               -Wall -Wextra -Wpedantic \
                               -I $(include_directory)  \
                               -Os -fno-strict-aliasing -fno-stack-protector

liblinux.targets :=

liblinux.compiler := $(compiler)
liblinux.compiler.gcc.options := $(option.PIC)

liblinux.linker := $(compiler)
liblinux.linker.gcc.options := $(option.linkage)

# System call library
liblinux.targets += library
library.type := library
library.name := linux
library.sources := $(call find,$(source_directory),file?)

library.linker.gcc.options := $(option.linkage) -nostdlib

# Process startup code
liblinux.targets += startfiles
startfiles.type := object
startfiles.sources := $(call find,$(start_architecture_directory),file?)

startfiles.compiler.gcc.options := -fno-PIC
startfiles.linker.gcc.options := -static

$(call to_object,$(start_architecture_directory)/_start.S).gcc.options := $(startfiles.compiler.gcc.options) -P

# GCC linker specification file and wrapper script
# Makes it easy to build programs using liblinux
gcc_specs_script := $(scripts_directory)/liblinux.specs.sh
gcc_wrapper_script := $(scripts_directory)/liblinux-gcc.sh

gcc_wrapper := $(call to_executable,liblinux-gcc)
gcc_specs := $(call to_library,liblinux.specs)

liblinux.targets += liblinux-gcc
liblinux-gcc.type := recipe
liblinux-gcc.targets := $(gcc_wrapper)

define liblinux-gcc.recipe :=

$(gcc_wrapper) : $(gcc_specs) $(gcc_wrapper_script)
	$(call mkdir_p,$(dir $(gcc_wrapper)))
	$(gcc_wrapper_script) $(gcc_specs) > $(gcc_wrapper)
	chmod +x $(gcc_wrapper)

$(gcc_specs) : $(gcc_specs_script) $(call as_library,linux) $(call to_object,$(startfiles.sources))
	$(call mkdir_p,$(dir $(gcc_specs)))
	$(gcc_specs_script) $(build_libraries_directory) $(call to_object,$(startfiles.sources)) > $(gcc_specs)

endef

# Library usage examples
define examples_template

liblinux.targets += $(1)

$(1).type := executable
$(1).sources := $(2)
$(1).dependencies := $(gcc_wrapper)

$(1).compiler.gcc := $(gcc_wrapper)
$(1).linker.gcc := $(gcc_wrapper)

endef

$(foreach example,$(call glob,$(examples_directory)/*.c),$(eval $(call examples_template,$(basename $(notdir $(example))),$(example))))

$(call project,liblinux)

include make/system_call_lists

# Linux kernel checkpatch script integration
include make/checkpatch
